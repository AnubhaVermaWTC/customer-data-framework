<?php

namespace CustomerManagementFrameworkBundle\Repository\Service\Auth;

use CustomerManagementFrameworkBundle\Entity\Service\Auth\AccessToken;
use CustomerManagementFrameworkBundle\Entity\Service\Auth\AuthCode;
use Doctrine\ORM\Mapping;
use League\OAuth2\Server\Entities\AccessTokenEntityInterface;
use League\OAuth2\Server\Entities\ClientEntityInterface;
use League\OAuth2\Server\Repositories\AccessTokenRepositoryInterface;
use Pimcore\Tool\RestClient\Exception;

/**
 * AccessTokenRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AccessTokenRepository extends \Doctrine\ORM\EntityRepository implements AccessTokenRepositoryInterface
{

    /**
     * @var \Doctrine\ORM\EntityManager
     */
    private $entity_manager = null;

    /**
     * @var string $user_identifier
     */
    private $user_identifier = null;


    public function __construct(\Doctrine\ORM\EntityManager $entity_manager)
    {
        $this->entity_manager = $entity_manager;
        parent::__construct($entity_manager, $entity_manager->getClassMetadata("CustomerManagementFrameworkBundle\Entity\Service\Auth\AccessToken"));
    }

    /**
     * {@inheritdoc}
     * @param AccessTokenEntityInterface $accessTokenEntity
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function persistNewAccessToken(AccessTokenEntityInterface $accessTokenEntity)
    {
        // Some logic here to save the access token to a database
        $this->entity_manager->persist($accessTokenEntity);
        $this->entity_manager->flush();
    }

    /**
     * {@inheritdoc}
     */
    public function revokeAccessToken($tokenId)
    {
        // Some logic here to revoke the access token
    }

    /**
     * {@inheritdoc}
     */
    public function isAccessTokenRevoked($tokenId)
    {
        return false; // Access token hasn't been revoked
    }

    /**
     * {@inheritdoc}
     * @param ClientEntityInterface $clientEntity
     * @param array $scopes
     * @param null $userIdentifier
     * @return AccessToken|AccessTokenEntityInterface
     * @throws Exception
     */
    public function getNewToken(ClientEntityInterface $clientEntity, array $scopes, $userIdentifier = null)
    {
        /* deactivated: do not remove last access-token
        $authCode = $this->entity_manager->getRepository(AuthCode::class)->findOneByUserIdentifier($userIdentifier);
        if($authCode) {
            $this->entity_manager->remove($authCode);
            $this->entity_manager->flush();
        }

        /* deactivated: do not edit own access-token but create a new one
        $entryFound = $this->entity_manager->getRepository(AccessToken::class)->findOneByUserIdentifier($userIdentifier);
        if($entryFound)return $entryFound;
        */

        $accessToken = new AccessToken();
        $accessToken->setClient($clientEntity);
        foreach ($scopes as $scope) {
            $accessToken->addScope($scope);
        }

        if($userIdentifier){
            $accessToken->setUserIdentifier($userIdentifier);
        }
        else{
            $accessToken->setUserIdentifier((int)$this->user_identifier);
        }

        if(!$accessToken->getUserIdentifier()){
            throw new Exception("AccessTokenRepository ERROR: user-idenfifier not set");
        }

        return $accessToken;
    }

    /**
     * @param string $userIdentifier
     */
    public function setUserIdenifier(string $userIdentifier){
        $this->user_identifier = $userIdentifier;
    }

}
